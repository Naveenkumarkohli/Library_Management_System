<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Manage Books - Library System</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; background: #f0f2f5; margin: 0; padding: 20px; }
    .container { max-width: 1400px; margin: auto; }
    .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }
    .header h1 { margin: 0; color: #333; }
    .nav-links { display: flex; gap: 15px; }
    .nav-link { background: #667eea; color: white; padding: 10px 16px; border-radius: 8px; text-decoration: none; font-weight: 600; }
    .nav-link:hover { background: #5a6fd8; }
    .btn-logout { background: #e74c3c; color: white; padding: 10px 16px; border-radius: 8px; text-decoration: none; font-weight: 600; }
    
    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
    .stat-card { background: white; padding: 25px; border-radius: 16px; box-shadow: 0 8px 25px rgba(0,0,0,0.1); text-align: center; }
    .stat-card h3 { margin: 0 0 10px 0; font-size: 2.5rem; font-weight: 700; }
    .stat-card p { margin: 0; color: #666; font-weight: 500; }
    .stat-card.total { border-left: 5px solid #667eea; }
    .stat-card.issued { border-left: 5px solid #e74c3c; }
    .stat-card.available { border-left: 5px solid #28a745; }
    
    .add-book-section { background: white; padding: 25px; border-radius: 16px; box-shadow: 0 8px 25px rgba(0,0,0,0.1); margin-bottom: 30px; }
    .add-book-form { display: flex; gap: 15px; align-items: end; flex-wrap: wrap; }
    .form-group { display: flex; flex-direction: column; }
    .form-group label { margin-bottom: 5px; font-weight: 600; color: #333; }
    .form-group input { padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 14px; min-width: 200px; }
    .form-group input:focus { outline: none; border-color: #667eea; }
    .btn-add { background: #28a745; color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer; font-weight: 600; }
    .btn-add:hover { background: #218838; }
    
    /* Books Grid with Pagination */
    .books-section { background: white; padding: 25px; border-radius: 16px; box-shadow: 0 8px 25px rgba(0,0,0,0.1); }
    .books-header { display: flex; justify-content: between; align-items: center; margin-bottom: 20px; }
    .books-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; max-width: 1200px; margin: 0 auto 30px auto; min-height: 460px; }
    .book-card { background: #f8f9fa; padding: 15px; border-radius: 12px; border: 1px solid #e9ecef; transition: transform 0.2s, box-shadow 0.2s; height: 220px; display: flex; flex-direction: column; }
    .book-card:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
    .book-card h3 { margin: 0 0 10px 0; color: #333; font-size: 1.1rem; display: flex; align-items: center; gap: 8px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
    .book-info { margin-bottom: 10px; flex-grow: 1; overflow: hidden; }
    .book-info p { margin: 4px 0; color: #666; font-size: 13px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
    .book-info strong { color: #333; }
    .status-badge { display: inline-block; padding: 4px 10px; border-radius: 15px; font-size: 11px; font-weight: 600; text-transform: uppercase; }
    .status-available { background: #d4edda; color: #155724; }
    .status-issued { background: #f8d7da; color: #721c24; }
    .book-actions { display: flex; gap: 8px; margin-top: auto; }
    .btn-delete { background: #e74c3c; color: white; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer; font-weight: 600; font-size: 12px; }
    .btn-delete:hover { background: #c82333; }
    
    /* Updated Pagination Styles to Match Home Page */
    .pagination-container { 
      display: flex; 
      justify-content: space-between; 
      align-items: center; 
      margin-top: 30px; 
      padding: 20px; 
      background: white; 
      border-radius: 16px; 
      box-shadow: 0 4px 20px rgba(0,0,0,0.08); 
      border-top: none;
    }
    .pagination-left { display: flex; align-items: center; gap: 10px; }
    .pagination-left label { font-weight: 600; color: #4a5568; }
    .pagination-left select { padding: 8px 12px; border: 2px solid #e2e8f0; border-radius: 8px; background: #f7fafc; }
    .pagination-center { display: flex; align-items: center; gap: 8px; }
    .pagination-btn { 
      padding: 8px 12px; 
      border: 2px solid #e2e8f0; 
      background: white; 
      color: #4a5568; 
      text-decoration: none; 
      border-radius: 8px; 
      font-weight: 500; 
      transition: all 0.2s;
    }
    .pagination-btn:hover { background: #f7fafc; border-color: #cbd5e0; text-decoration: none; color: #4a5568; }
    .pagination-btn.active { background: #667eea; color: white; border-color: #667eea; }
    .pagination-btn.disabled { opacity: 0.5; pointer-events: none; }
    .pagination-right { display: flex; align-items: center; gap: 10px; }
    .pagination-right input { padding: 8px 12px; border: 2px solid #e2e8f0; border-radius: 8px; width: 60px; text-align: center; background: #f7fafc; }
    .pagination-right button { 
      padding: 8px 16px; 
      background: #667eea; 
      color: white; 
      border: none; 
      border-radius: 8px; 
      cursor: pointer; 
      font-weight: 600; 
      transition: all 0.2s;
    }
    .pagination-right button:hover { background: #5a6fd8; transform: translateY(-1px); }
    
    .flash { margin-bottom: 20px; padding: 15px; border-radius: 8px; }
    .flash-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
    .flash-error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    
    .empty-state { text-align: center; padding: 50px; color: #666; }
    .empty-state i { font-size: 4rem; margin-bottom: 20px; opacity: 0.3; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-book"></i> Manage Books</h1>
      <div class="nav-links">
        <a href="/home" class="nav-link"><i class="fas fa-home"></i> Dashboard</a>
        <a href="/admin/users" class="nav-link"><i class="fas fa-users"></i> Users</a>
        <a href="/admin" class="nav-link"><i class="fas fa-cog"></i> Admin Panel</a>
        <a href="/logout" class="btn-logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
      </div>
    </div>

    <% if (success.length > 0) { %>
      <% success.forEach(msg => { %>
        <div class="flash flash-success"><i class="fas fa-check-circle"></i> <%= msg %></div>
      <% }) %>
    <% } %>
    <% if (error.length > 0) { %>
      <% error.forEach(msg => { %>
        <div class="flash flash-error"><i class="fas fa-exclamation-circle"></i> <%= msg %></div>
      <% }) %>
    <% } %>

    <!-- Stats Cards -->
    <div class="stats-grid">
      <div class="stat-card total">
        <h3><%= stats.totalBooks %></h3>
        <p><i class="fas fa-book"></i> Total Books</p>
      </div>
      <div class="stat-card available">
        <h3><%= stats.availableBooks %></h3>
        <p><i class="fas fa-check-circle"></i> Available Books</p>
      </div>
      <div class="stat-card issued">
        <h3><%= stats.issuedBooks %></h3>
        <p><i class="fas fa-hand-holding"></i> Issued Books</p>
      </div>
    </div>

    <!-- Add Book Section -->
    <div class="add-book-section">
      <h2><i class="fas fa-plus-circle"></i> Add New Book</h2>
      <form action="/admin/addBook" method="post" class="add-book-form">
        <div class="form-group">
          <label for="title">Book Title</label>
          <input type="text" id="title" name="title" placeholder="Enter book title" required>
        </div>
        <div class="form-group">
          <label for="author">Author</label>
          <input type="text" id="author" name="author" placeholder="Enter author name" required>
        </div>
        <div class="form-group">
          <label for="category">Category</label>
          <input type="text" id="category" name="category" placeholder="Enter category" required>
        </div>
        <button type="submit" class="btn-add"><i class="fas fa-plus"></i> Add Book</button>
      </form>
    </div>

    <!-- Books Section with Pagination -->
    <div class="books-section">
      <div class="books-header">
        <h2><i class="fas fa-books"></i> Books Library</h2>
      </div>
      
      <!-- Search Bar -->
      <div class="search-section" style="margin-bottom: 20px;">
        <input type="text" class="search-input" placeholder="Search books by title, author, category, or status..." id="searchInput" style="width: 100%; max-width: 400px; padding: 12px 16px; border: 1px solid #ddd; border-radius: 8px; font-size: 14px;">
      </div>
      
      <div class="books-grid" id="booksGrid"></div>
      
      <div class="pagination-container" id="paginationContainer">
        <div class="pagination-left">
          <label>Record Per Page:</label>
          <select id="recordsPerPage" onchange="performSearch()">
            <option value="3" selected>3</option>
            <option value="6">6</option>
            <option value="9">9</option>
            <option value="12">12</option>
          </select>
        </div>
        
        <div class="pagination-center"></div>
        
        <div class="pagination-right">
          <label>Go to:</label>
          <input type="number" id="gotoPage" min="1" max="1" placeholder="1">
          <button onclick="gotoPage()">Go</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    let searchTimeout;
    async function performSearch() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(async () => {
        const searchTerm = document.getElementById('searchInput').value;
        const currentPage = 1; // Reset to first page on search
        const limit = document.getElementById('recordsPerPage')?.value || 3;
        
        try {
          const params = new URLSearchParams({
            page: currentPage,
            limit: limit
          });
          
          if (searchTerm) params.append('q', searchTerm);
          
          const response = await fetch(`/api/search/admin-books?${params}`);
          const data = await response.json();
          
          if (data.success) {
            updateBooksDisplay(data.books, data.pagination);
          } else {
            console.error('Search failed:', data.message);
          }
        } catch (error) {
          console.error('Search error:', error);
        }
      }, 300); // Debounce search by 300ms
    }
    
    function updateBooksDisplay(books, pagination) {
      const container = document.getElementById('booksGrid');
      
      // Clear existing books
      container.innerHTML = '';
      
      if (books.length === 0) {
        container.innerHTML = `
          <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px; color: #a0aec0;">
            <i class="fas fa-search" style="font-size: 4rem; margin-bottom: 20px;"></i>
            <h3 style="margin: 0 0 10px 0; color: #4a5568;">No books found</h3>
            <p style="margin: 0;">Try adjusting your search criteria.</p>
          </div>
        `;
        return;
      }
      
      // Add new books
      books.forEach(book => {
        const bookCard = document.createElement('div');
        bookCard.className = 'book-card';
        bookCard.setAttribute('data-title', book.title.toLowerCase());
        bookCard.setAttribute('data-author', book.author.toLowerCase());
        bookCard.setAttribute('data-category', book.category.toLowerCase());
        bookCard.setAttribute('data-status', book.state.toLowerCase());
        
        let issuedToHtml = '';
        if (book.state === 'Issued' && book.issuedTo) {
          issuedToHtml = `<p><strong>Issued To:</strong> ${book.issuedTo}</p>`;
        }
        
        bookCard.innerHTML = `
          <h3><i class="fas fa-book-open"></i> ${book.title}</h3>
          <div class="book-info">
            <p><strong>Author:</strong> ${book.author}</p>
            <p><strong>Category:</strong> ${book.category}</p>
            <p><strong>Status:</strong> 
              <span class="status-badge ${book.state === 'Available' ? 'status-available' : 'status-issued'}">
                ${book.state}
              </span>
            </p>
            ${issuedToHtml}
          </div>
          <div class="book-actions">
            <form action="/admin/deleteBook" method="post" style="display: inline;">
              <input type="hidden" name="id" value="${book._id}">
              <button type="submit" class="btn-delete" onclick="return confirm('Are you sure you want to delete this book?')">
                <i class="fas fa-trash"></i> Delete
              </button>
            </form>
          </div>
        `;
        
        container.appendChild(bookCard);
      });
      
      // Update pagination
      updatePagination(pagination);
    }
    
    function updatePagination(pagination) {
      const paginationContainer = document.getElementById('paginationContainer');
      if (!paginationContainer) return;
      
      if (pagination.totalPages > 1) {
        paginationContainer.style.display = 'flex';
        
        // Update page numbers and navigation
        const paginationCenter = paginationContainer.querySelector('.pagination-center');
        if (paginationCenter) {
          let paginationHtml = '';
          
          // Previous button
          if (pagination.currentPage > 1) {
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPage(${pagination.currentPage - 1})" class="pagination-btn">← Prev</a>`;
          } else {
            paginationHtml += `<span class="pagination-btn disabled">← Prev</span>`;
          }
          
          // Page numbers
          const startPage = Math.max(1, pagination.currentPage - 2);
          const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
          
          for (let i = startPage; i <= endPage; i++) {
            const activeClass = i === pagination.currentPage ? 'active' : '';
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPage(${i})" class="pagination-btn ${activeClass}">${i}</a>`;
          }
          
          // Next button
          if (pagination.currentPage < pagination.totalPages) {
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPage(${pagination.currentPage + 1})" class="pagination-btn">Next →</a>`;
          } else {
            paginationHtml += `<span class="pagination-btn disabled">Next →</span>`;
          }
          
          paginationCenter.innerHTML = paginationHtml;
        }
      } else {
        paginationContainer.style.display = 'none';
      }
    }
    
    async function searchBooksPage(page) {
      const searchTerm = document.getElementById('searchInput').value;
      const limit = document.getElementById('recordsPerPage')?.value || 3;
      
      try {
        const params = new URLSearchParams({
          page: page,
          limit: limit
        });
        
        if (searchTerm) params.append('q', searchTerm);
        
        const response = await fetch(`/api/search/admin-books?${params}`);
        const data = await response.json();
        
        if (data.success) {
          updateBooksDisplay(data.books, data.pagination);
        } else {
          console.error('Search failed:', data.message);
        }
      } catch (error) {
        console.error('Search error:', error);
      }
    }
    
    function gotoPage() {
      const page = parseInt(document.getElementById('gotoPage').value);
      if (page && page >= 1) {
        searchBooksPage(page);
      }
    }
    
    // Update search input event listener
    document.getElementById('searchInput').addEventListener('input', performSearch);
    
    // Initial load
    performSearch();
  </script>
</body>
</html>
