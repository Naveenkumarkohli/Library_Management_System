<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Library Home</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; background: #f8fafc; margin: 0; padding: 20px; }
    .container { max-width: 1400px; margin: auto; }
    
    .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; background: white; padding: 20px 30px; border-radius: 16px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); }
    .header h1 { margin: 0; color: #1a202c; font-size: 1.8rem; }
    .btn-logout { background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%); color: white; padding: 12px 20px; border-radius: 10px; text-decoration: none; font-weight: 600; transition: transform 0.2s; }
    .btn-logout:hover { transform: translateY(-2px); }
    
    /* Admin Dashboard Styles */
    .admin-dashboard { margin-bottom: 30px; }
    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 20px; margin-bottom: 30px; }
    .stat-card { background: white; padding: 25px; border-radius: 16px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); text-align: center; transition: transform 0.3s; }
    .stat-card:hover { transform: translateY(-5px); }
    .stat-card h3 { margin: 0 0 10px 0; font-size: 2.5rem; font-weight: 700; }
    .stat-card p { margin: 0; color: #666; font-weight: 500; }
    .stat-card.books { border-left: 5px solid #667eea; }
    .stat-card.issued { border-left: 5px solid #e74c3c; }
    .stat-card.available { border-left: 5px solid #28a745; }
    .stat-card.users { border-left: 5px solid #17a2b8; }
    .stat-card.pending { border-left: 5px solid #ffc107; }
    
    .nav-cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; }
    .nav-card { background: white; padding: 30px; border-radius: 16px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); text-decoration: none; color: inherit; transition: all 0.3s; }
    .nav-card:hover { transform: translateY(-5px); box-shadow: 0 8px 30px rgba(0,0,0,0.15); text-decoration: none; color: inherit; }
    .nav-card-icon { font-size: 3rem; margin-bottom: 20px; }
    .nav-card h3 { margin: 0 0 15px 0; color: #333; }
    .nav-card p { margin: 0; color: #666; line-height: 1.5; }
    .nav-card.books-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
    .nav-card.books-card h3, .nav-card.books-card p { color: white; }
    .nav-card.users-card { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; }
    .nav-card.users-card h3, .nav-card.users-card p { color: white; }
    .nav-card.admin-card { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; }
    .nav-card.admin-card h3, .nav-card.admin-card p { color: white; }
    
    /* User Stats Section */
    .user-stats-section { margin-bottom: 40px; }
    .section-title { font-size: 1.5rem; font-weight: 700; color: #1a202c; margin-bottom: 20px; display: flex; align-items: center; gap: 10px; }
    .user-stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
    .user-stat-card { background: white; padding: 25px; border-radius: 16px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); text-align: center; transition: transform 0.3s; }
    .user-stat-card:hover { transform: translateY(-3px); }
    .user-stat-card h3 { margin: 0 0 8px 0; font-size: 2.2rem; font-weight: 700; }
    .user-stat-card p { margin: 0; color: #666; font-weight: 500; font-size: 0.9rem; }
    .user-stat-card.currently { border-left: 5px solid #e74c3c; }
    .user-stat-card.total { border-left: 5px solid #667eea; }
    .user-stat-card.returned { border-left: 5px solid #28a745; }
    .user-stat-card.rate { border-left: 5px solid #17a2b8; }
    
    /* Modern Filter Section */
    .filter-section { background: white; padding: 30px; border-radius: 16px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); margin-bottom: 30px; }
    .filter-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; }
    .filter-header h2 { margin: 0; color: #1a202c; font-size: 1.3rem; }
    .filter-controls { display: grid; grid-template-columns: 2fr 1fr 1fr 1fr; gap: 20px; }
    
    .filter-group { position: relative; }
    .filter-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #4a5568; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px; }
    .filter-input { width: 100%; padding: 14px 16px; border: 2px solid #e2e8f0; border-radius: 12px; font-size: 15px; transition: all 0.3s; background: #f7fafc; }
    .filter-input:focus { outline: none; border-color: #667eea; background: white; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }
    .filter-input:hover { border-color: #cbd5e0; }
    
    .search-input { background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="%23a0aec0" viewBox="0 0 24 24"><path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/></svg>') no-repeat 16px center; background-size: 18px; padding-left: 50px; }
    
    .clear-btn { background: linear-gradient(135deg, #718096 0%, #4a5568 100%); color: white; border: none; padding: 14px 20px; border-radius: 12px; cursor: pointer; font-weight: 600; transition: all 0.3s; }
    .clear-btn:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(113, 128, 150, 0.4); }
    
    .results-info { display: flex; justify-content: space-between; align-items: center; margin: 20px 0; padding: 15px 20px; background: #f7fafc; border-radius: 12px; }
    .results-count { font-weight: 600; color: #4a5568; }
    
    /* Books Section */
    .books-section { margin-bottom: 10px; }
    .books-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; max-width: 1200px; margin: 0 auto; }
    .book-card { 
      background: white; 
      padding: 15px; 
      border-radius: 16px; 
      box-shadow: 0 8px 25px rgba(0,0,0,0.1); 
      transition: transform 0.2s; 
      display: flex; 
      flex-direction: column; 
      height: 220px;
    }
    .book-card:hover { transform: translateY(-5px); }
    .book-card h3 { 
      margin: 0; 
      color: #333; 
      font-size: 1.1rem; 
      display: flex; 
      align-items: center; 
      gap: 10px; 
      margin-bottom: 10px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .book-card p { 
      margin: 4px 0; 
      color: #666; 
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .book-card p strong { 
      color: #333; 
    }
    .status-badge { 
      display: inline-block; 
      padding: 6px 12px; 
      border-radius: 20px; 
      font-size: 12px; 
      font-weight: 600; 
      text-transform: uppercase; 
    }
    .status-available { background: #d4edda; color: #155724; }
    .status-issued { background: #f8d7da; color: #721c24; }
    .book-actions { 
      display: flex; 
      gap: 10px; 
      margin-top: auto; 
    }
    .btn-issue { 
      background: #28a745; 
      color: white; 
      border: none; 
      padding: 10px 16px; 
      border-radius: 6px; 
      cursor: pointer; 
      font-weight: 600; 
      flex: 1;
    }
    .btn-issue:hover { background: #218838; }
    .btn-return { 
      background: #007bff; 
      color: white; 
      border: none; 
      padding: 10px 16px; 
      border-radius: 6px; 
      cursor: pointer; 
      font-weight: 600; 
      flex: 1;
    }
    .btn-return:hover { background: #0056b3; }
    
    /* Pagination Styles for Home Page */
    .pagination-container { 
      display: flex; 
      justify-content: space-between; 
      align-items: center; 
      margin-top: 30px; 
      padding: 20px; 
      background: white; 
      border-radius: 16px; 
      box-shadow: 0 4px 20px rgba(0,0,0,0.08); 
    }
    .pagination-left { display: flex; align-items: center; gap: 10px; }
    .pagination-left label { font-weight: 600; color: #4a5568; }
    .pagination-left select { padding: 8px 12px; border: 2px solid #e2e8f0; border-radius: 8px; background: #f7fafc; }
    .pagination-center { display: flex; align-items: center; gap: 8px; }
    .pagination-btn { 
      padding: 8px 12px; 
      border: 2px solid #e2e8f0; 
      background: white; 
      color: #4a5568; 
      text-decoration: none; 
      border-radius: 8px; 
      font-weight: 500; 
      transition: all 0.2s;
    }
    .pagination-btn:hover { background: #f7fafc; border-color: #cbd5e0; text-decoration: none; color: #4a5568; }
    .pagination-btn.active { background: #667eea; color: white; border-color: #667eea; }
    .pagination-btn.disabled { opacity: 0.5; pointer-events: none; }
    .pagination-right { display: flex; align-items: center; gap: 10px; }
    .pagination-right input { padding: 8px 12px; border: 2px solid #e2e8f0; border-radius: 8px; width: 60px; text-align: center; background: #f7fafc; }
    .pagination-right button { 
      padding: 8px 16px; 
      background: #667eea; 
      color: white; 
      border: none; 
      border-radius: 8px; 
      cursor: pointer; 
      font-weight: 600; 
      transition: all 0.2s;
    }
    .pagination-right button:hover { background: #5a6fd8; transform: translateY(-1px); }
    
    .empty-state { text-align: center; padding: 60px 20px; color: #a0aec0; }
    .empty-state i { font-size: 4rem; margin-bottom: 20px; }
    .empty-state h3 { margin: 0 0 10px 0; color: #4a5568; }
    
    .flash { margin-bottom: 20px; padding: 15px 20px; border-radius: 12px; font-weight: 500; }
    .flash-success { background: #c6f6d5; color: #22543d; border-left: 4px solid #48bb78; }
    .flash-error { background: #fed7d7; color: #742a2a; border-left: 4px solid #e53e3e; }
    
    @media (max-width: 768px) {
      .filter-controls { grid-template-columns: 1fr; }
      .books-grid { grid-template-columns: 1fr; }
      .user-stats-grid { grid-template-columns: repeat(2, 1fr); }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-book-reader"></i> Welcome, <%= user.username %></h1>
      <a href="/logout" class="btn-logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>

    <% if (success.length > 0) { %>
      <% success.forEach(msg => { %>
        <div class="flash flash-success"><i class="fas fa-check-circle"></i> <%= msg %></div>
      <% }) %>
    <% } %>
    <% if (error.length > 0) { %>
      <% error.forEach(msg => { %>
        <div class="flash flash-error"><i class="fas fa-exclamation-circle"></i> <%= msg %></div>
      <% }) %>
    <% } %>

    <% if (user.role === 'admin') { %>
      <!-- Admin Dashboard -->
      <div class="admin-dashboard">
        <h2 class="section-title"><i class="fas fa-tachometer-alt"></i> Admin Dashboard</h2>
        
        <div class="stats-grid">
          <div class="stat-card books">
            <h3><%= stats.totalBooks %></h3>
            <p><i class="fas fa-book"></i> Total Books</p>
          </div>
          <div class="stat-card available">
            <h3><%= stats.availableBooks %></h3>
            <p><i class="fas fa-check-circle"></i> Available</p>
          </div>
          <div class="stat-card issued">
            <h3><%= stats.issuedBooks %></h3>
            <p><i class="fas fa-hand-holding"></i> Issued</p>
          </div>
          <div class="stat-card users">
            <h3><%= stats.totalUsers %></h3>
            <p><i class="fas fa-users"></i> Total Users</p>
          </div>
          <div class="stat-card pending">
            <h3><%= stats.pendingRequests %></h3>
            <p><i class="fas fa-clock"></i> Pending Requests</p>
          </div>
        </div>

        <div class="nav-cards">
          <a href="/admin/books" class="nav-card books-card">
            <div class="nav-card-icon"><i class="fas fa-book"></i></div>
            <h3>Manage Books</h3>
            <p>Add, edit, and delete books from the library collection. View book statistics and manage availability.</p>
          </a>
          
          <a href="/admin/users" class="nav-card users-card">
            <div class="nav-card-icon"><i class="fas fa-users"></i></div>
            <h3>Manage Users</h3>
            <p>Add new users, approve registrations, and manage user accounts and permissions.</p>
          </a>
          
          <a href="/admin" class="nav-card admin-card">
            <div class="nav-card-icon"><i class="fas fa-cogs"></i></div>
            <h3>Admin Panel</h3>
            <p>Access the full admin panel with all management tools and system settings.</p>
          </a>
        </div>
      </div>
    <% } else { %>
      <!-- User Dashboard -->
      
      <!-- User Personal Stats -->
      <div class="user-stats-section">
        <h2 class="section-title"><i class="fas fa-chart-user"></i> My Library Statistics</h2>
        <div class="user-stats-grid">
          <div class="user-stat-card currently">
            <h3><%= userStats.currentlyIssued || 0 %></h3>
            <p><i class="fas fa-hand-holding"></i> Currently Reading</p>
          </div>
          <div class="user-stat-card total">
            <h3><%= userStats.totalIssued || 0 %></h3>
            <p><i class="fas fa-book-open"></i> Books Borrowed</p>
          </div>
          <div class="user-stat-card returned">
            <h3><%= userStats.totalReturned || 0 %></h3>
            <p><i class="fas fa-undo"></i> Books Returned</p>
          </div>
          <div class="user-stat-card rate">
            <h3><%= userStats.returnRate || 0 %>%</h3>
            <p><i class="fas fa-star"></i> Return Rate</p>
          </div>
        </div>
      </div>

      <!-- Search and Filter Section -->
      <div class="filter-section">
        <div class="filter-header">
          <h2><i class="fas fa-search"></i> Find Your Next Book</h2>
          <button class="clear-btn" onclick="clearFilters()">
            <i class="fas fa-refresh"></i> Reset Filters
          </button>
        </div>
        
        <div class="filter-controls">
          <div class="filter-group">
            <label>Search Books</label>
            <input type="text" id="searchInput" class="filter-input search-input" placeholder="Search by title or author...">
          </div>
          <div class="filter-group">
            <label>Category</label>
            <select id="categoryFilter" class="filter-input">
              <option value="">All Categories</option>
              <option value="Fiction">Fiction</option>
              <option value="Non-Fiction">Non-Fiction</option>
              <option value="Science">Science</option>
              <option value="History">History</option>
              <option value="Biography">Biography</option>
              <option value="Technology">Technology</option>
              <option value="Romance">Romance</option>
              <option value="Mystery">Mystery</option>
              <option value="Programming">Programming</option>
              <option value="Self-Help">Self-Help</option>
              <option value="Fantasy">Fantasy</option>
              <option value="Dystopia">Dystopia</option>
            </select>
          </div>
          <div class="filter-group">
            <label>Availability</label>
            <select id="statusFilter" class="filter-input">
              <option value="">All Books</option>
              <option value="Available">Available Only</option>
              <option value="Issued">Currently Issued</option>
              <option value="My Books">My Books</option>
            </select>
          </div>
          <div class="filter-group">
            <label>Sort By</label>
            <select id="sortFilter" class="filter-input">
              <option value="title">Title A-Z</option>
              <option value="author">Author A-Z</option>
              <option value="category">Category</option>
              <option value="status">Availability</option>
            </select>
          </div>
        </div>
        
        <div class="results-info">
          <div class="results-count">
            Showing <span id="visibleCount">0</span> of <span id="totalCount">0</span> books
          </div>
        </div>
      </div>

      <!-- Books Section -->
      <div class="books-section">
        <h2 class="section-title"><i class="fas fa-books"></i> Library Collection</h2>
        
        <div id="booksContainer" class="books-grid"></div>

        <!-- Pagination Controls -->
        <div class="pagination-container">
          <div class="pagination-left">
            <label>Books Per Page:</label>
            <select id="recordsPerPage" onchange="changeRecordsPerPage()">
              <option value="3" selected>3</option>
              <option value="6">6</option>
              <option value="9">9</option>
              <option value="12">12</option>
            </select>
          </div>
            
          <div class="pagination-center"></div>
            
          <div class="pagination-right">
            <label>Go to:</label>
            <input type="number" id="gotoPage" min="1" max="1" placeholder="1">
            <button onclick="gotoPage()">Go</button>
          </div>
        </div>
        
        <div id="noResults" class="empty-state" style="display: none;">
          <i class="fas fa-search"></i>
          <h3>No books found</h3>
          <p>Try adjusting your search criteria or filters to find what you're looking for.</p>
        </div>
      </div>
    <% } %>
  </div>

  <script>
    // Pagination Functions
    function changeRecordsPerPage() {
      searchBooks(); // Use backend search with new limit
    }
    
    function gotoPage() {
      const page = parseInt(document.getElementById('gotoPage').value);
      if (page && page >= 1) {
        searchBooksPageNumber(page);
      }
    }
    
    async function searchBooksPageNumber(page) {
      const searchTerm = document.getElementById('searchInput').value;
      const categoryFilter = document.getElementById('categoryFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const sortFilter = document.getElementById('sortFilter').value;
      const limit = document.getElementById('recordsPerPage').value;
      
      try {
        const params = new URLSearchParams({
          page: page,
          limit: limit
        });
        
        if (searchTerm) params.append('q', searchTerm);
        if (categoryFilter) params.append('category', categoryFilter);
        if (statusFilter) params.append('status', statusFilter);
        if (sortFilter) params.append('sort', sortFilter);
        
        const response = await fetch(`/api/search/books?${params}`);
        const data = await response.json();
        
        if (data.success) {
          updateBooksDisplay(data.books, data.pagination);
        } else {
          console.error('Search failed:', data.message);
        }
      } catch (error) {
        console.error('Search error:', error);
      }
    }
    
    // Backend search functionality
    let searchTimeout;
    async function searchBooks() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(async () => {
        const searchTerm = document.getElementById('searchInput').value;
        const categoryFilter = document.getElementById('categoryFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;
        const sortFilter = document.getElementById('sortFilter').value;
        const currentPage = 1; // Reset to first page on search
        const limit = document.getElementById('recordsPerPage')?.value || 3;
        
        try {
          const params = new URLSearchParams({
            page: currentPage,
            limit: limit
          });
          
          if (searchTerm) params.append('q', searchTerm);
          if (categoryFilter) params.append('category', categoryFilter);
          if (statusFilter) params.append('status', statusFilter);
          if (sortFilter) params.append('sort', sortFilter);
          
          const response = await fetch(`/api/search/books?${params}`);
          const data = await response.json();
          
          if (data.success) {
            updateBooksDisplay(data.books, data.pagination);
          } else {
            console.error('Search failed:', data.message);
          }
        } catch (error) {
          console.error('Search error:', error);
        }
      }, 300); // Debounce search by 300ms
    }
    
    function updateBooksDisplay(books, pagination) {
      const container = document.getElementById('booksContainer');
      const noResults = document.getElementById('noResults');
      
      // Clear existing books
      container.innerHTML = '';
      
      if (books.length === 0) {
        noResults.style.display = 'block';
        document.getElementById('visibleCount').textContent = '0';
        return;
      }
      
      noResults.style.display = 'none';
      
      // Add new books
      books.forEach(book => {
        const bookCard = document.createElement('div');
        bookCard.className = 'book-card';
        bookCard.setAttribute('data-title', book.title.toLowerCase());
        bookCard.setAttribute('data-author', book.author.toLowerCase());
        bookCard.setAttribute('data-category', book.category);
        bookCard.setAttribute('data-status', book.state);
        bookCard.setAttribute('data-issued-to', book.issuedTo || '');
        
        let issuedToHtml = '';
        if (book.state === 'Issued' && book.issuedTo && book.issuedTo !== '<%= user.username %>') {
          issuedToHtml = `<p><strong>Issued To:</strong> ${book.issuedTo}</p>`;
        }
        
        let actionButtons = '';
        if (book.state === 'Available') {
          actionButtons = `
            <button type="button" class="btn-issue" onclick="issueBook('${book._id}')">
              <i class="fas fa-download"></i> Issue
            </button>
          `;
        } else if (book.state === 'Issued' && book.issuedTo === '<%= user.username %>') {
          actionButtons = `
            <button type="button" class="btn-return" onclick="returnBook('${book._id}')">
              <i class="fas fa-upload"></i> Return
            </button>
          `;
        }
        
        bookCard.innerHTML = `
          <h3><i class="fas fa-book"></i> ${book.title}</h3>
          <p><strong>Author:</strong> ${book.author}</p>
          <p><strong>Category:</strong> ${book.category}</p>
          <p><strong>Status:</strong> 
            <span class="status-badge ${book.state === 'Available' ? 'status-available' : 'status-issued'}">
              ${book.state}
            </span>
          </p>
          ${issuedToHtml}
          <div class="book-actions">
            ${actionButtons}
          </div>
        `;
        
        container.appendChild(bookCard);
      });
      
      // Update counters
      document.getElementById('visibleCount').textContent = books.length;
      document.getElementById('totalCount').textContent = pagination.totalBooks;
      
      // Update pagination if needed
      updatePagination(pagination);
    }
    
    function updatePagination(pagination) {
      // Update pagination controls
      const paginationContainer = document.querySelector('.pagination-container');
      if (paginationContainer && pagination.totalPages > 1) {
        // Show pagination
        paginationContainer.style.display = 'flex';
        
        // Update Go to Page input max value
        const gotoPageInput = document.getElementById('gotoPage');
        if (gotoPageInput) {
          gotoPageInput.max = pagination.totalPages;
          gotoPageInput.placeholder = pagination.currentPage;
        }
        
        // Update page numbers and navigation
        const paginationCenter = paginationContainer.querySelector('.pagination-center');
        if (paginationCenter) {
          let paginationHtml = '';
          
          // Previous button
          if (pagination.currentPage > 1) {
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPageNumber(${pagination.currentPage - 1})" class="pagination-btn">← Prev</a>`;
          } else {
            paginationHtml += `<span class="pagination-btn disabled">← Prev</span>`;
          }
          
          // Page numbers
          const startPage = Math.max(1, pagination.currentPage - 2);
          const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
          
          for (let i = startPage; i <= endPage; i++) {
            const activeClass = i === pagination.currentPage ? 'active' : '';
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPageNumber(${i})" class="pagination-btn ${activeClass}">${i}</a>`;
          }
          
          // Next button
          if (pagination.currentPage < pagination.totalPages) {
            paginationHtml += `<a href="javascript:void(0)" onclick="searchBooksPageNumber(${pagination.currentPage + 1})" class="pagination-btn">Next →</a>`;
          } else {
            paginationHtml += `<span class="pagination-btn disabled">Next →</span>`;
          }
          
          paginationCenter.innerHTML = paginationHtml;
        }
      } else {
        // Hide pagination if only one page
        if (paginationContainer) {
          paginationContainer.style.display = 'none';
        }
      }
    }
    
    async function issueBook(id) {
      try {
        // Disable button during request
        const button = event.target;
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Issuing...';
        
        const response = await fetch(`/api/issue/${id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json();
        
        if (data.success) {
          showMessage(data.message, 'success');
          searchBooks(); // Update book list
        } else {
          showMessage(data.message, 'error');
          // Re-enable button on error
          button.disabled = false;
          button.innerHTML = originalText;
        }
      } catch (error) {
        console.error('Issue error:', error);
        showMessage('Error issuing book. Please try again.', 'error');
        // Re-enable button on error
        const button = event.target;
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-download"></i> Issue';
      }
    }
    
    async function returnBook(id) {
      try {
        // Disable button during request
        const button = event.target;
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Returning...';
        
        const response = await fetch(`/api/return/${id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json();
        
        if (data.success) {
          showMessage(data.message, 'success');
          searchBooks(); // Update book list
        } else {
          showMessage(data.message, 'error');
          // Re-enable button on error
          button.disabled = false;
          button.innerHTML = originalText;
        }
      } catch (error) {
        console.error('Return error:', error);
        showMessage('Error returning book. Please try again.', 'error');
        // Re-enable button on error
        const button = event.target;
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-upload"></i> Return';
      }
    }
    
    function showMessage(message, type) {
      // Remove existing messages
      const existingMessages = document.querySelectorAll('.flash-message');
      existingMessages.forEach(msg => msg.remove());
      
      // Create new message
      const messageDiv = document.createElement('div');
      messageDiv.className = `flash flash-${type} flash-message`;
      messageDiv.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i> ${message}`;
      
      // Insert at top of container
      const container = document.querySelector('.container');
      const header = container.querySelector('.header');
      container.insertBefore(messageDiv, header.nextSibling);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
    
    function clearFilters() {
      document.getElementById('searchInput').value = '';
      document.getElementById('categoryFilter').value = '';
      document.getElementById('statusFilter').value = '';
      document.getElementById('sortFilter').value = 'title';
      searchBooks(); // Use backend search instead of client-side filtering
    }
    
    // Add event listeners for filtering
    document.getElementById('searchInput').addEventListener('input', searchBooks);
    document.getElementById('categoryFilter').addEventListener('change', searchBooks);
    document.getElementById('statusFilter').addEventListener('change', searchBooks);
    document.getElementById('sortFilter').addEventListener('change', searchBooks);
    
    // Initial search
    searchBooks();
  </script>
</body>
</html>
